# Docker Compose configuration for GCP Cloud Run local testing
# This simulates the GCP environment for local development and testing

version: '3.8'

networks:
  another-doctor-gcp:
    driver: bridge

services:
  # Simulate Cloud SQL with PostgreSQL
  postgres-gcp:
    image: postgres:15
    container_name: another-doctor-postgres-gcp
    restart: unless-stopped
    environment:
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: secure_password
      POSTGRES_DB: another_doctor
    ports:
      - "5433:5432"
    volumes:
      - postgres_gcp_data:/var/lib/postgresql/data
    networks:
      - another-doctor-gcp
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d another_doctor"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Simulate Memorystore with Redis
  redis-gcp:
    image: redis:7-alpine
    container_name: another-doctor-redis-gcp
    restart: unless-stopped
    command: redis-server --requirepass secure_redis_password
    ports:
      - "6380:6379"
    volumes:
      - redis_gcp_data:/data
    networks:
      - another-doctor-gcp
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "secure_redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant vector database (same as production)
  qdrant-gcp:
    image: qdrant/qdrant:v1.7.0
    container_name: another-doctor-qdrant-gcp
    restart: unless-stopped
    ports:
      - "6334:6333"
    volumes:
      - qdrant_gcp_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__LOG_LEVEL: INFO
    networks:
      - another-doctor-gcp
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simulate Cloud Storage with MinIO
  minio-gcp:
    image: minio/minio:latest
    container_name: another-doctor-minio-gcp
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - "9002:9000"  # API
      - "9003:9001"  # Console
    environment:
      MINIO_ROOT_USER: gcp_storage_key
      MINIO_ROOT_PASSWORD: gcp_storage_secret
    volumes:
      - minio_gcp_data:/data
    networks:
      - another-doctor-gcp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend with GCP-like configuration
  backend-gcp:
    build:
      context: .
      dockerfile: infra/docker/backend.Dockerfile
      target: production
    container_name: another-doctor-backend-gcp
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://app_user:secure_password@postgres-gcp:5432/another_doctor
      - REDIS_URL=redis://:secure_redis_password@redis-gcp:6379
      - QDRANT_URL=http://qdrant-gcp:6333
      - CLOUD_STORAGE_BUCKET=gcp-storage-bucket
      - GCP_PROJECT_ID=test-project
      - SECRET_KEY=production-secret-key-for-testing
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend-gcp
      - BACKEND_CORS_ORIGINS=http://localhost:3001
      - LOG_LEVEL=INFO
    depends_on:
      postgres-gcp:
        condition: service_healthy
      redis-gcp:
        condition: service_healthy
      qdrant-gcp:
        condition: service_healthy
      minio-gcp:
        condition: service_healthy
    networks:
      - another-doctor-gcp
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages:/app/packages

  # Frontend with production build
  frontend-gcp:
    build:
      context: .
      dockerfile: infra/docker/frontend.Dockerfile
      target: production
    container_name: another-doctor-frontend-gcp
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8001/api/v1
      - NEXT_PUBLIC_ENVIRONMENT=production
    depends_on:
      - backend-gcp
    networks:
      - another-doctor-gcp

  # Workers with GCP configuration
  workers-gcp:
    build:
      context: .
      dockerfile: infra/docker/workers.Dockerfile
      target: production
    container_name: another-doctor-workers-gcp
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://app_user:secure_password@postgres-gcp:5432/another_doctor
      - REDIS_URL=redis://:secure_redis_password@redis-gcp:6379
      - QDRANT_URL=http://qdrant-gcp:6333
      - CLOUD_STORAGE_BUCKET=gcp-storage-bucket
      - GCP_PROJECT_ID=test-project
    depends_on:
      - postgres-gcp
      - redis-gcp
      - backend-gcp
    networks:
      - another-doctor-gcp
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages:/app/packages

volumes:
  postgres_gcp_data:
  redis_gcp_data:
  qdrant_gcp_data:
  minio_gcp_data: