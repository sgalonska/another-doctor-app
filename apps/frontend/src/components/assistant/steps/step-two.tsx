"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { Logo } from '@/components/ui/logo';
import { BrandButton } from '@/components/ui/brand-button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { DiagnosisData } from '../diagnosis-assistant';
import { ArrowRight, ArrowLeft, Download, FileText, Loader2, CheckCircle, AlertCircle } from 'lucide-react';

interface StepTwoProps {
  diagnosisData: DiagnosisData;
  updateDiagnosisData: (data: Partial<DiagnosisData>) => void;
  onNext: () => void;
  onBack: () => void;
}

export function StepTwo({ diagnosisData, updateDiagnosisData, onNext, onBack }: StepTwoProps) {
  const [isProcessing, setIsProcessing] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [processedDiagnosis, setProcessedDiagnosis] = useState('');
  const [error, setError] = useState('');

  const processDiagnosis = useCallback(async () => {
    setIsProcessing(true);
    setError('');
    
    try {
      // Simulate AI processing - in real app, this would call your backend
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const processed = `Human-Readable Medical Analysis
      
Original Diagnosis: ${diagnosisData.diagnosis}

Simplified Explanation:
Based on the provided information, this condition involves [simplified medical explanation]. 

Key Points:
• Primary medical concerns identified
• Potential symptoms and manifestations  
• Recommended specialist types
• Important considerations for treatment

Specialist Recommendations:
Based on this analysis, we recommend consultation with specialists in:
- [Relevant specialty 1]
- [Relevant specialty 2]
- [Relevant specialty 3]

Next Steps:
Our system will now connect you with verified specialists who have expertise in treating this condition.

Generated by Another Doctor AI Analysis System`;

      setProcessedDiagnosis(processed);
      updateDiagnosisData({ processedDiagnosis: processed });
    } catch (err) {
      setError('Failed to process diagnosis. Please try again.');
    } finally {
      setIsProcessing(false);
    }
  }, [diagnosisData.diagnosis, updateDiagnosisData]);

  useEffect(() => {
    if (!diagnosisData.processedDiagnosis) {
      processDiagnosis();
    } else {
      setProcessedDiagnosis(diagnosisData.processedDiagnosis);
    }
  }, [diagnosisData.processedDiagnosis, processDiagnosis]);

  const downloadPDF = async () => {
    setIsDownloading(true);
    
    try {
      // In a real app, this would generate and download an actual PDF
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Simulate PDF download
      const blob = new Blob([processedDiagnosis], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'medical-analysis.txt';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      updateDiagnosisData({ pdfGenerated: true });
    } catch (err) {
      setError('Failed to download PDF. Please try again.');
    } finally {
      setIsDownloading(false);
    }
  };

  const handleContinue = () => {
    onNext();
  };

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-brand-gradient-from to-brand-gradient-to">
      {/* Header with Logo */}
      <header className="p-4 lg:p-8">
        <div className="container max-w-4xl">
          <Logo variant="hero" className="mb-4" />
          <div className="flex items-center gap-2 text-sm text-text-gray">
            <span className="px-2 py-1 bg-brand-teal text-white rounded-full text-xs font-medium">
              Step 2 of 4
            </span>
            <span>Analysis Complete</span>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-1 flex items-center justify-center p-4 lg:p-8">
        <div className="w-full max-w-4xl">
          <Card className="border-0 shadow-lg bg-white/95 backdrop-blur-sm">
            <CardHeader className="text-center pb-6">
              <div className="mx-auto mb-4 h-16 w-16 rounded-full bg-brand-coral/10 flex items-center justify-center">
                {isProcessing ? (
                  <Loader2 className="h-8 w-8 text-brand-coral animate-spin" />
                ) : (
                  <FileText className="h-8 w-8 text-brand-coral" />
                )}
              </div>
              <CardTitle className="text-2xl lg:text-3xl font-bold text-text-dark mb-2">
                {isProcessing ? 'Processing Your Diagnosis...' : 'Analysis Complete'}
              </CardTitle>
              <p className="text-text-gray text-lg">
                {isProcessing 
                  ? 'Our AI is analyzing your diagnosis and preparing a human-readable report.'
                  : 'Your diagnosis has been analyzed and converted into an easy-to-understand format.'
                }
              </p>
            </CardHeader>
            
            <CardContent className="space-y-6">
              {error && (
                <div className="flex items-center gap-2 text-red-600 text-sm bg-red-50 border border-red-200 rounded-lg p-4" role="alert">
                  <AlertCircle className="h-4 w-4 flex-shrink-0" />
                  <span>{error}</span>
                </div>
              )}

              {isProcessing && (
                <div className="text-center py-8">
                  <p className="text-sm text-text-gray">Analyzing medical terminology...</p>
                </div>
              )}

              {!isProcessing && processedDiagnosis && (
                <>
                  <div className="bg-gray-50 border border-gray-200 rounded-lg p-6 max-h-64 overflow-y-auto">
                    <h4 className="font-medium text-text-dark mb-3 flex items-center gap-2">
                      <CheckCircle className="h-5 w-5 text-green-600" />
                      Human-Readable Analysis Preview
                    </h4>
                    <pre className="text-sm text-text-gray whitespace-pre-wrap font-sans">
                      {processedDiagnosis.substring(0, 300)}...
                    </pre>
                  </div>

                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <h4 className="font-medium text-green-900 mb-2">Ready to Download</h4>
                    <p className="text-sm text-green-700 mb-4">
                      Your complete medical analysis is ready. Download the PDF to keep a copy of your personalized report.
                    </p>
                    
                    <BrandButton 
                      variant="ghost-filled"
                      onClick={downloadPDF}
                      disabled={isDownloading}
                      className="w-full sm:w-auto border border-brand-teal"
                    >
                      {isDownloading ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Generating PDF...
                        </>
                      ) : (
                        <>
                          <Download className="mr-2 h-4 w-4" />
                          Download Analysis PDF
                        </>
                      )}
                    </BrandButton>
                  </div>

                  <div className="flex flex-col sm:flex-row gap-4 pt-4">
                    <BrandButton 
                      variant="ghost-filled" 
                      onClick={onBack}
                      className="h-12 text-base font-medium"
                    >
                      <ArrowLeft className="mr-2 h-5 w-5" />
                      Back
                    </BrandButton>
                    <BrandButton 
                      onClick={handleContinue}
                      className="flex-1 h-12 text-base font-medium"
                    >
                      Continue to Specialist Matching
                      <ArrowRight className="ml-2 h-5 w-5" />
                    </BrandButton>
                  </div>
                </>
              )}
            </CardContent>
          </Card>
        </div>
      </main>

      {/* Footer */}
      <footer className="p-4 lg:p-8">
        <div className="container max-w-4xl">
          <div className="text-center text-sm text-text-gray">
            <p>Secure • HIPAA Compliant • AI-Powered Medical Analysis</p>
          </div>
        </div>
      </footer>
    </div>
  );
}