version: '3.8'

networks:
  another-doctor:
    driver: bridge

services:
  # Database Services
  postgres:
    image: postgres:15
    container_name: another-doctor-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: another_doctor
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - another-doctor
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d another_doctor"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: another-doctor-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - another-doctor
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: another-doctor-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./infra/docker/qdrant/config.yaml:/qdrant/config/production.yaml:ro
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    networks:
      - another-doctor
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (S3-compatible storage for local development)
  minio:
    image: minio/minio:latest
    container_name: another-doctor-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    networks:
      - another-doctor
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create MinIO bucket
  minio-setup:
    image: minio/mc:latest
    container_name: another-doctor-minio-setup
    depends_on:
      - minio
    networks:
      - another-doctor
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/another-doctor-uploads --ignore-existing;
      /usr/bin/mc anonymous set public myminio/another-doctor-uploads;
      echo 'MinIO setup complete';
      "

  # Application Services
  backend:
    build:
      context: .
      dockerfile: infra/docker/backend.Dockerfile
      target: development
    container_name: another-doctor-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/another_doctor
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - R2_ENDPOINT_URL=http://minio:9000
      - R2_ACCESS_KEY_ID=minioadmin
      - R2_SECRET_ACCESS_KEY=minioadmin
      - R2_BUCKET_NAME=another-doctor-uploads
      - SECRET_KEY=dev-secret-key-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - BACKEND_CORS_ORIGINS=http://localhost:3000,http://frontend:3000
      - PUBMED_API_KEY=
      - CROSSREF_EMAIL=dev@anotherdoctor.local
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages:/app/packages
    networks:
      - another-doctor
    command: >
      sh -c "
        echo 'Waiting for database to be ready...';
        sleep 5;
        echo 'Running database migrations...';
        cd /app/apps/backend && alembic upgrade head;
        echo 'Starting backend server...';
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload;
      "

  frontend:
    build:
      context: .
      dockerfile: infra/docker/frontend.Dockerfile
      target: development
    container_name: another-doctor-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NEXT_PUBLIC_WORKERS_URL=http://localhost:8787
      - NEXT_PUBLIC_ENVIRONMENT=development
    volumes:
      - ./apps/frontend:/app
      - ./packages/ts-utils:/packages/ts-utils
      - /app/node_modules
      - /app/.next
    networks:
      - another-doctor
    command: npm run dev
    depends_on:
      - backend

  workers:
    build:
      context: .
      dockerfile: infra/docker/workers.Dockerfile
      target: development
    container_name: another-doctor-workers
    restart: unless-stopped
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/another_doctor
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - R2_ENDPOINT_URL=http://minio:9000
      - R2_ACCESS_KEY_ID=minioadmin
      - R2_SECRET_ACCESS_KEY=minioadmin
      - R2_BUCKET_NAME=another-doctor-uploads
    depends_on:
      - postgres
      - redis
      - backend
    volumes:
      - ./apps/workers:/app/workers
      - ./packages:/app/packages
    networks:
      - another-doctor
    command: python -m rq worker --with-scheduler

  # Development Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: another-doctor-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@anotherdoctor.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./infra/docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - another-doctor
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: another-doctor-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - another-doctor
    depends_on:
      - redis

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: another-doctor-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infra/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - another-doctor
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: another-doctor-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - another-doctor
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  minio_data:
  pgadmin_data:
  prometheus_data:
  grafana_data: