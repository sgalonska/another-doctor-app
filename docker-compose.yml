networks:
  another-doctor:
    driver: bridge

services:
  # Database Services
  postgres:
    image: postgres:15
    container_name: another-doctor-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: another_doctor
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - another-doctor
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d another_doctor"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: another-doctor-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - another-doctor
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: another-doctor-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./infra/docker/qdrant/config.yaml:/qdrant/config/production.yaml:ro
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    networks:
      - another-doctor
    # Note: Qdrant container doesn't include curl/wget, so we rely on external health checks

  # Note: MinIO removed - using GCP Cloud Storage in production
  # For local development, file uploads can be stored locally or mocked

  # Note: Frontend, Backend, and Workers are now run manually
  # Use the scripts: ./scripts/run-frontend-local.sh and ./scripts/run-backend-local.sh
  # This provides better development experience and prepares for GCP deployment

  # Development Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: another-doctor-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@anotherdoctor.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./infra/docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - another-doctor
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: another-doctor-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - another-doctor
    depends_on:
      - redis

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: another-doctor-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infra/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - another-doctor
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: another-doctor-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - another-doctor
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  pgadmin_data:
  prometheus_data:
  grafana_data: